# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class DomainAnnotation(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login',
            service_ver='release',
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms)

    def search_domains(self, input, context=None):
        """
        Search for domains in a genome
        :param input: instance of type "SearchDomainsInput" (genome_ref
           genome - genome for domain annotation process dms_ref dms_ref -
           set of domain models that will be searched in defined genome
           string ws - workspace string output_result_id - id of resulting
           object of type DomainAnnotation) -> structure: parameter
           "genome_ref" of type "genome_ref" (@id ws KBaseGenomes.Genome),
           parameter "dms_ref" of type "dms_ref" (@id ws
           KBaseGeneFamilies.DomainModelSet), parameter "ws" of String,
           parameter "output_result_id" of type "domain_annotation_ref" (@id
           ws KBaseGeneFamilies.DomainAnnotation)
        :returns: instance of type "SearchDomainsOutput" (Output is a report,
           and a DomainAnnotation object) -> structure: parameter
           "output_result_id" of type "domain_annotation_ref" (@id ws
           KBaseGeneFamilies.DomainAnnotation), parameter "report_name" of
           String, parameter "report_ref" of String
        """
        return self._client.run_job('DomainAnnotation.search_domains',
                                    [input], self._service_ver, context)

    def search_domains_ga(self, input, context=None):
        """
        Search for domains in a genome annotation
        :param input: instance of type "SearchDomainsGAInput"
           (genome_annotation_ref genome - genome annotaion for domain
           annotation process dms_ref dms_ref - set of domain models that
           will be searched in defined genome string ws - workspace string
           output_result_id - id of resulting object of type
           GenomeAnnotation) -> structure: parameter "genome_annotation_ref"
           of type "genome_annotation_ref" (@id ws
           KBaseGenomeAnnotations.GenomeAnnotation), parameter "dms_ref" of
           type "dms_ref" (@id ws KBaseGeneFamilies.DomainModelSet),
           parameter "ws" of String, parameter "output_result_id" of type
           "genome_annotation_ref" (@id ws
           KBaseGenomeAnnotations.GenomeAnnotation)
        :returns: instance of type "SearchDomainsGAOutput" (Output is a
           report, and a GenomeAnnotation object) -> structure: parameter
           "output_result_id" of type "genome_annotation_ref" (@id ws
           KBaseGenomeAnnotations.GenomeAnnotation), parameter "report_name"
           of String, parameter "report_ref" of String
        """
        return self._client.run_job('DomainAnnotation.search_domains_ga',
                                    [input], self._service_ver, context)

    def export_csv(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (Exporter for domain
           annotations as CSV files) -> structure: parameter "input_ref" of
           String
        :returns: instance of type "ExportResult" -> structure: parameter
           "shock_id" of String
        """
        return self._client.run_job('DomainAnnotation.export_csv',
                                    [params], self._service_ver, context)

    def version(self, context=None):
        """
        returns version number of service
        :returns: instance of String
        """
        return self._client.run_job('DomainAnnotation.version',
                                    [], self._service_ver, context)

    def status(self, context=None):
        return self._client.run_job('DomainAnnotation.status',
                                    [], self._service_ver, context)
